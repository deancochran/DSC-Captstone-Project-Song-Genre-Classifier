{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DSC Final Lab: Spotify Data","provenance":[],"collapsed_sections":[],"toc_visible":true,"machine_shape":"hm","authorship_tag":"ABX9TyOb0/0WX0R6RCh0nzSPG9Xu"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"gy4klHDoXYLi"},"source":["# Load in the 'SpotifyFeatures' Spotify Dataset\n","\n","Notice: \n","Before this dataset can be used, it must be uploaded to the local colab notebook. (To do this... click the folder(file) icon on the right side of the screen, and click upload. Then upload the CSV file , 'SpotifyFeatures.csv' )\n","If this page is closed the data **MUST** be uploaded again\n","\n","If the user of this notebook doesn't have access to the dataset, the file can be found at the following URL address\n","https://www.kaggle.com/zaheenhamidani/ultimate-spotify-tracks-db\n","\n"]},{"cell_type":"markdown","metadata":{"id":"c8FCf_gByvqh","colab_type":"text"},"source":["# Spotify Data Analysis \n","By: Dean Cochran\n","\n"]},{"cell_type":"markdown","metadata":{"id":"Hs4CWsJB0yxJ","colab_type":"text"},"source":["# Goal\n","\n","**To become an effective data scientist, you need extensive practice modeling and analyzing real world relationships. In this anlysis I hope to highlight the relationship between Spotify's audio features and its genre.**\n","\n","In other words, I hope find the best model to predict the genre of a single single song using various machine learning classification algorithms.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"HkCUqVFhyv0M","colab_type":"text"},"source":["# Abstract\n","\n","\n","> In this analysis I follow the Data Science LifeCycle that we focused on master this semester. I explore the data that we to understand the domain of my dataset. This allows to pull more meaningful conclusions from my results. I prepare my data as apart of the 'Data Prepartion' stage by manipulating the data I explored to get ready to plan my classifying models I want to use it this lab. I build the models and tune the hyper-parameters to find the best possible model for classifying a songs genre. Finally I \"bag\" all the useful models in my results and create another model which is a collection of al models and analyze its reults. \n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"-2YmFG1o2aii","colab_type":"text"},"source":["# Imports"]},{"cell_type":"code","metadata":{"id":"RyZoXagi2dpR","colab_type":"code","colab":{}},"source":["##IMPORTS REQUIRED FOR DATA MANIPULATION AND EXPXLORATION\n","import sklearn\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.preprocessing import LabelEncoder,MinMaxScaler\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import pandas as pd\n","import numpy as np\n","from tqdm import tqdm\n","\n","##IMPORTS FOR BUILDING MODELS and TUNING HYPERPARAMETERS\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import RandomForestClassifier,VotingClassifier\n","from sklearn.linear_model import LogisticRegression, SGDClassifier\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.svm import SVC\n","from sklearn.model_selection import GridSearchCV\n","\n","##IMPORTS FOR ANALYSIS OF MODELS\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import accuracy_score, classification_report\n","\n","%matplotlib inline"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RGkutH05f-Mg","colab_type":"text"},"source":["# LOADING IN DATA"]},{"cell_type":"code","metadata":{"id":"54kECDfn3G_3","colab_type":"code","colab":{}},"source":["spotify = pd.read_csv(\"SpotifyFeatures.csv\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"_2-Hjnpd9Qug","colab_type":"text"},"source":["Before assuming anything about our data, lets take a look at the dataset"]},{"cell_type":"code","metadata":{"id":"PJuKqAY39obi","colab_type":"code","outputId":"b719caad-ce4b-4636-b657-7200deb95862","executionInfo":{"status":"ok","timestamp":1589175186151,"user_tz":300,"elapsed":2454,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":711}},"source":["spotify"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>genre</th>\n","      <th>artist_name</th>\n","      <th>track_name</th>\n","      <th>track_id</th>\n","      <th>popularity</th>\n","      <th>acousticness</th>\n","      <th>danceability</th>\n","      <th>duration_ms</th>\n","      <th>energy</th>\n","      <th>instrumentalness</th>\n","      <th>key</th>\n","      <th>liveness</th>\n","      <th>loudness</th>\n","      <th>mode</th>\n","      <th>speechiness</th>\n","      <th>tempo</th>\n","      <th>time_signature</th>\n","      <th>valence</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Movie</td>\n","      <td>Henri Salvador</td>\n","      <td>C'est beau de faire un Show</td>\n","      <td>0BRjO6ga9RKCKjfDqeFgWV</td>\n","      <td>0</td>\n","      <td>0.61100</td>\n","      <td>0.389</td>\n","      <td>99373</td>\n","      <td>0.910</td>\n","      <td>0.000000</td>\n","      <td>C#</td>\n","      <td>0.3460</td>\n","      <td>-1.828</td>\n","      <td>Major</td>\n","      <td>0.0525</td>\n","      <td>166.969</td>\n","      <td>4/4</td>\n","      <td>0.814</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Movie</td>\n","      <td>Martin &amp; les f√©es</td>\n","      <td>Perdu d'avance (par Gad Elmaleh)</td>\n","      <td>0BjC1NfoEOOusryehmNudP</td>\n","      <td>1</td>\n","      <td>0.24600</td>\n","      <td>0.590</td>\n","      <td>137373</td>\n","      <td>0.737</td>\n","      <td>0.000000</td>\n","      <td>F#</td>\n","      <td>0.1510</td>\n","      <td>-5.559</td>\n","      <td>Minor</td>\n","      <td>0.0868</td>\n","      <td>174.003</td>\n","      <td>4/4</td>\n","      <td>0.816</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Movie</td>\n","      <td>Joseph Williams</td>\n","      <td>Don't Let Me Be Lonely Tonight</td>\n","      <td>0CoSDzoNIKCRs124s9uTVy</td>\n","      <td>3</td>\n","      <td>0.95200</td>\n","      <td>0.663</td>\n","      <td>170267</td>\n","      <td>0.131</td>\n","      <td>0.000000</td>\n","      <td>C</td>\n","      <td>0.1030</td>\n","      <td>-13.879</td>\n","      <td>Minor</td>\n","      <td>0.0362</td>\n","      <td>99.488</td>\n","      <td>5/4</td>\n","      <td>0.368</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Movie</td>\n","      <td>Henri Salvador</td>\n","      <td>Dis-moi Monsieur Gordon Cooper</td>\n","      <td>0Gc6TVm52BwZD07Ki6tIvf</td>\n","      <td>0</td>\n","      <td>0.70300</td>\n","      <td>0.240</td>\n","      <td>152427</td>\n","      <td>0.326</td>\n","      <td>0.000000</td>\n","      <td>C#</td>\n","      <td>0.0985</td>\n","      <td>-12.178</td>\n","      <td>Major</td>\n","      <td>0.0395</td>\n","      <td>171.758</td>\n","      <td>4/4</td>\n","      <td>0.227</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Movie</td>\n","      <td>Fabien Nataf</td>\n","      <td>Ouverture</td>\n","      <td>0IuslXpMROHdEPvSl1fTQK</td>\n","      <td>4</td>\n","      <td>0.95000</td>\n","      <td>0.331</td>\n","      <td>82625</td>\n","      <td>0.225</td>\n","      <td>0.123000</td>\n","      <td>F</td>\n","      <td>0.2020</td>\n","      <td>-21.150</td>\n","      <td>Major</td>\n","      <td>0.0456</td>\n","      <td>140.576</td>\n","      <td>4/4</td>\n","      <td>0.390</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>232720</th>\n","      <td>Soul</td>\n","      <td>Slave</td>\n","      <td>Son Of Slide</td>\n","      <td>2XGLdVl7lGeq8ksM6Al7jT</td>\n","      <td>39</td>\n","      <td>0.00384</td>\n","      <td>0.687</td>\n","      <td>326240</td>\n","      <td>0.714</td>\n","      <td>0.544000</td>\n","      <td>D</td>\n","      <td>0.0845</td>\n","      <td>-10.626</td>\n","      <td>Major</td>\n","      <td>0.0316</td>\n","      <td>115.542</td>\n","      <td>4/4</td>\n","      <td>0.962</td>\n","    </tr>\n","    <tr>\n","      <th>232721</th>\n","      <td>Soul</td>\n","      <td>Jr Thomas &amp; The Volcanos</td>\n","      <td>Burning Fire</td>\n","      <td>1qWZdkBl4UVPj9lK6HuuFM</td>\n","      <td>38</td>\n","      <td>0.03290</td>\n","      <td>0.785</td>\n","      <td>282447</td>\n","      <td>0.683</td>\n","      <td>0.000880</td>\n","      <td>E</td>\n","      <td>0.2370</td>\n","      <td>-6.944</td>\n","      <td>Minor</td>\n","      <td>0.0337</td>\n","      <td>113.830</td>\n","      <td>4/4</td>\n","      <td>0.969</td>\n","    </tr>\n","    <tr>\n","      <th>232722</th>\n","      <td>Soul</td>\n","      <td>Muddy Waters</td>\n","      <td>(I'm Your) Hoochie Coochie Man</td>\n","      <td>2ziWXUmQLrXTiYjCg2fZ2t</td>\n","      <td>47</td>\n","      <td>0.90100</td>\n","      <td>0.517</td>\n","      <td>166960</td>\n","      <td>0.419</td>\n","      <td>0.000000</td>\n","      <td>D</td>\n","      <td>0.0945</td>\n","      <td>-8.282</td>\n","      <td>Major</td>\n","      <td>0.1480</td>\n","      <td>84.135</td>\n","      <td>4/4</td>\n","      <td>0.813</td>\n","    </tr>\n","    <tr>\n","      <th>232723</th>\n","      <td>Soul</td>\n","      <td>R.LUM.R</td>\n","      <td>With My Words</td>\n","      <td>6EFsue2YbIG4Qkq8Zr9Rir</td>\n","      <td>44</td>\n","      <td>0.26200</td>\n","      <td>0.745</td>\n","      <td>222442</td>\n","      <td>0.704</td>\n","      <td>0.000000</td>\n","      <td>A</td>\n","      <td>0.3330</td>\n","      <td>-7.137</td>\n","      <td>Major</td>\n","      <td>0.1460</td>\n","      <td>100.031</td>\n","      <td>4/4</td>\n","      <td>0.489</td>\n","    </tr>\n","    <tr>\n","      <th>232724</th>\n","      <td>Soul</td>\n","      <td>Mint Condition</td>\n","      <td>You Don't Have To Hurt No More</td>\n","      <td>34XO9RwPMKjbvRry54QzWn</td>\n","      <td>35</td>\n","      <td>0.09730</td>\n","      <td>0.758</td>\n","      <td>323027</td>\n","      <td>0.470</td>\n","      <td>0.000049</td>\n","      <td>G#</td>\n","      <td>0.0836</td>\n","      <td>-6.708</td>\n","      <td>Minor</td>\n","      <td>0.0287</td>\n","      <td>113.897</td>\n","      <td>4/4</td>\n","      <td>0.479</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>232725 rows √ó 18 columns</p>\n","</div>"],"text/plain":["        genre               artist_name  ... time_signature valence\n","0       Movie            Henri Salvador  ...            4/4   0.814\n","1       Movie         Martin & les f√©es  ...            4/4   0.816\n","2       Movie           Joseph Williams  ...            5/4   0.368\n","3       Movie            Henri Salvador  ...            4/4   0.227\n","4       Movie              Fabien Nataf  ...            4/4   0.390\n","...       ...                       ...  ...            ...     ...\n","232720   Soul                     Slave  ...            4/4   0.962\n","232721   Soul  Jr Thomas & The Volcanos  ...            4/4   0.969\n","232722   Soul              Muddy Waters  ...            4/4   0.813\n","232723   Soul                   R.LUM.R  ...            4/4   0.489\n","232724   Soul            Mint Condition  ...            4/4   0.479\n","\n","[232725 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"id":"lZTNtVZtgLW9","colab_type":"code","outputId":"f8826620-023c-449d-f75f-cb825babff5c","executionInfo":{"status":"ok","timestamp":1589175186152,"user_tz":300,"elapsed":2422,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":442}},"source":["spotify.info()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 232725 entries, 0 to 232724\n","Data columns (total 18 columns):\n"," #   Column            Non-Null Count   Dtype  \n","---  ------            --------------   -----  \n"," 0   genre             232725 non-null  object \n"," 1   artist_name       232725 non-null  object \n"," 2   track_name        232725 non-null  object \n"," 3   track_id          232725 non-null  object \n"," 4   popularity        232725 non-null  int64  \n"," 5   acousticness      232725 non-null  float64\n"," 6   danceability      232725 non-null  float64\n"," 7   duration_ms       232725 non-null  int64  \n"," 8   energy            232725 non-null  float64\n"," 9   instrumentalness  232725 non-null  float64\n"," 10  key               232725 non-null  object \n"," 11  liveness          232725 non-null  float64\n"," 12  loudness          232725 non-null  float64\n"," 13  mode              232725 non-null  object \n"," 14  speechiness       232725 non-null  float64\n"," 15  tempo             232725 non-null  float64\n"," 16  time_signature    232725 non-null  object \n"," 17  valence           232725 non-null  float64\n","dtypes: float64(9), int64(2), object(7)\n","memory usage: 32.0+ MB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"G3XfijXP92wA","colab_type":"text"},"source":["Here are some things you should notice after looking at the data...\n","\n","*   **WOW, that's a lot of data**\n","*   This gives us a great visual of the full dataset could look like.\n","*   There's a lot of information that I can't interpret\n","*   What do all these features mean\n","\n"]},{"cell_type":"markdown","metadata":{"id":"pd_ftny9-VPp","colab_type":"text"},"source":["To address all of these initial preceptions, lets first address what all of our feature values mean\n","*   genre:  a category of artistic composition\n","*   artist_name:  the name of the artist\n","*   track_name: the name of the song\n","*   track_id: the Spofity Id of the song (every song has a unique id)\n","*   popularity: the spotify's rating of popularity (range:[1,100])\n","*   acousticness: A confidence measure from 0.0 to 1.0 of whether the track is acoustic.\n","*   danceability: Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity.\n","*   duration_ms: the length of the song measure in milli-seconds\n","*   Energy: Energy is a measure from 0.0 to 1.0 and represents a perceptual measure of intensity and activity.\n","*   instrumentalness: Predicts whether a track contains no vocals.\n","*   key: the key the song is played in\n","*   liveness: Detects the presence of an audience in the recording. \n","*   Loudness: \tThe overall loudness of a track in decibels (dB). \n","*   mode: wether the song is played in a minor or major chord\n","*   speechiness: Speechiness detects the presence of spoken words in a track. \n","*   tempo: the pace at which the song is played at\n","*   time signature: the signature the pace of the song is played at\n","*   valence: \tA measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track. \n","\n"]},{"cell_type":"markdown","metadata":{"id":"0j8Ude8mX6hT","colab_type":"text"},"source":["# Lets Explore the Data\n","I want to know what parts of this data are missing, and what parts of this data I need to manipulate inorder to verify that the data is 'clean'\n","\n","To do this I wrote a helper function which will parse through my data and 'explore' for me...."]},{"cell_type":"code","metadata":{"id":"YK1c_8sRc5u3","colab_type":"code","colab":{}},"source":["# helper function to investigate issues with dataset\n","def explore(dataset):\n","  woDup = dataset.drop_duplicates(keep = 'first', inplace = False)\n","  print(\"There are\", len(dataset) - len(woDup), \"duplicate rows in this dataset.\")\n","  print(\"\")\n","\n","  ## feature names ?  \n","  stats = dataset.count(level=None)\n","  names = stats.index\n","  print(\"There are\", len(list(names)), \"columns in the dataset.\")\n","  print(\"\")\n","\n","  ## missing data ?\n","  total = stats[0]\n","  missing  = {\"Column Name\":[],\"% Missing\":[]}\n","  for i in range(1,len(names)):\n","    missNum = total - stats[i]\n","    p = missNum / total\n","    missing['% Missing'].append(p * 100)\n","    missing['Column Name'].append(names[i])\n","  missing = pd.DataFrame(data=missing)\n","  tops = missing.sort_values(by=['% Missing'], ascending = False)\n","  print(tops)\n","  print(\"\")\n","  print(\"Consider scaling data for modeling.\")\n","  return "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Sd16Cp7d2RX","colab_type":"code","outputId":"53f6aea2-4c2f-47d4-f60b-9f511fa67fd6","executionInfo":{"status":"ok","timestamp":1589175187025,"user_tz":300,"elapsed":3257,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":425}},"source":["explore(spotify)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["There are 0 duplicate rows in this dataset.\n","\n","There are 18 columns in the dataset.\n","\n","         Column Name  % Missing\n","0        artist_name        0.0\n","9                key        0.0\n","15    time_signature        0.0\n","14             tempo        0.0\n","13       speechiness        0.0\n","12              mode        0.0\n","11          loudness        0.0\n","10          liveness        0.0\n","8   instrumentalness        0.0\n","1         track_name        0.0\n","7             energy        0.0\n","6        duration_ms        0.0\n","5       danceability        0.0\n","4       acousticness        0.0\n","3         popularity        0.0\n","2           track_id        0.0\n","16           valence        0.0\n","\n","Consider scaling data for modeling.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Pm-YV_aUZBpW","colab_type":"code","outputId":"19250320-1077-4d19-ffdd-3668d6f5d372","executionInfo":{"status":"ok","timestamp":1589175187025,"user_tz":300,"elapsed":3235,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":493}},"source":["spotify.genre.value_counts()"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Comedy              9681\n","Soundtrack          9646\n","Indie               9543\n","Jazz                9441\n","Pop                 9386\n","Electronic          9377\n","Children‚Äôs Music    9353\n","Folk                9299\n","Hip-Hop             9295\n","Rock                9272\n","Alternative         9263\n","Classical           9256\n","Rap                 9232\n","World               9096\n","Soul                9089\n","Blues               9023\n","R&B                 8992\n","Anime               8936\n","Reggaeton           8927\n","Ska                 8874\n","Reggae              8771\n","Dance               8701\n","Country             8664\n","Opera               8280\n","Movie               7806\n","Children's Music    5403\n","A Capella            119\n","Name: genre, dtype: int64"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"J3w3qi8cZC3w","colab_type":"text"},"source":["**Notice that the instances of each genre are not balanced. We need to change this later**"]},{"cell_type":"markdown","metadata":{"id":"g5p4-IEgTD9b","colab_type":"text"},"source":["**Check for duplicates Again... Somethings off**\n","\n","Each row of this data represents a song. However, there are songs that labelled into multiple genre. Take a look at this data"]},{"cell_type":"code","metadata":{"id":"O0jPAGatT9F5","colab_type":"code","colab":{}},"source":["df=spotify.copy()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"SVSUqmqvS_pF","colab_type":"code","outputId":"82ed7edd-c98b-48b0-83ed-675b15f15a2b","executionInfo":{"status":"ok","timestamp":1589175187253,"user_tz":300,"elapsed":3417,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":241}},"source":["##IDENTIFYING SONGS OF THE SAME TRACK_ID\n","duplicated_all = df[df.duplicated(subset = 'track_id', keep=False)]\n","duplicated = df[df.duplicated(subset = 'track_id', keep='first')]\n","df[df['track_id'] == duplicated['track_id'].iloc[0]]"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>genre</th>\n","      <th>artist_name</th>\n","      <th>track_name</th>\n","      <th>track_id</th>\n","      <th>popularity</th>\n","      <th>acousticness</th>\n","      <th>danceability</th>\n","      <th>duration_ms</th>\n","      <th>energy</th>\n","      <th>instrumentalness</th>\n","      <th>key</th>\n","      <th>liveness</th>\n","      <th>loudness</th>\n","      <th>mode</th>\n","      <th>speechiness</th>\n","      <th>tempo</th>\n","      <th>time_signature</th>\n","      <th>valence</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>257</th>\n","      <td>R&amp;B</td>\n","      <td>Doja Cat</td>\n","      <td>Go To Town</td>\n","      <td>6iOvnACn4ChlAw4lWUU4dd</td>\n","      <td>64</td>\n","      <td>0.0716</td>\n","      <td>0.71</td>\n","      <td>217813</td>\n","      <td>0.71</td>\n","      <td>0.000001</td>\n","      <td>C</td>\n","      <td>0.206</td>\n","      <td>-2.474</td>\n","      <td>Major</td>\n","      <td>0.0579</td>\n","      <td>169.944</td>\n","      <td>4/4</td>\n","      <td>0.7</td>\n","    </tr>\n","    <tr>\n","      <th>1348</th>\n","      <td>Alternative</td>\n","      <td>Doja Cat</td>\n","      <td>Go To Town</td>\n","      <td>6iOvnACn4ChlAw4lWUU4dd</td>\n","      <td>64</td>\n","      <td>0.0716</td>\n","      <td>0.71</td>\n","      <td>217813</td>\n","      <td>0.71</td>\n","      <td>0.000001</td>\n","      <td>C</td>\n","      <td>0.206</td>\n","      <td>-2.474</td>\n","      <td>Major</td>\n","      <td>0.0579</td>\n","      <td>169.944</td>\n","      <td>4/4</td>\n","      <td>0.7</td>\n","    </tr>\n","    <tr>\n","      <th>77710</th>\n","      <td>Children‚Äôs Music</td>\n","      <td>Doja Cat</td>\n","      <td>Go To Town</td>\n","      <td>6iOvnACn4ChlAw4lWUU4dd</td>\n","      <td>64</td>\n","      <td>0.0716</td>\n","      <td>0.71</td>\n","      <td>217813</td>\n","      <td>0.71</td>\n","      <td>0.000001</td>\n","      <td>C</td>\n","      <td>0.206</td>\n","      <td>-2.474</td>\n","      <td>Major</td>\n","      <td>0.0579</td>\n","      <td>169.944</td>\n","      <td>4/4</td>\n","      <td>0.7</td>\n","    </tr>\n","    <tr>\n","      <th>93651</th>\n","      <td>Indie</td>\n","      <td>Doja Cat</td>\n","      <td>Go To Town</td>\n","      <td>6iOvnACn4ChlAw4lWUU4dd</td>\n","      <td>64</td>\n","      <td>0.0716</td>\n","      <td>0.71</td>\n","      <td>217813</td>\n","      <td>0.71</td>\n","      <td>0.000001</td>\n","      <td>C</td>\n","      <td>0.206</td>\n","      <td>-2.474</td>\n","      <td>Major</td>\n","      <td>0.0579</td>\n","      <td>169.944</td>\n","      <td>4/4</td>\n","      <td>0.7</td>\n","    </tr>\n","    <tr>\n","      <th>113770</th>\n","      <td>Pop</td>\n","      <td>Doja Cat</td>\n","      <td>Go To Town</td>\n","      <td>6iOvnACn4ChlAw4lWUU4dd</td>\n","      <td>64</td>\n","      <td>0.0716</td>\n","      <td>0.71</td>\n","      <td>217813</td>\n","      <td>0.71</td>\n","      <td>0.000001</td>\n","      <td>C</td>\n","      <td>0.206</td>\n","      <td>-2.474</td>\n","      <td>Major</td>\n","      <td>0.0579</td>\n","      <td>169.944</td>\n","      <td>4/4</td>\n","      <td>0.7</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                   genre artist_name  ... time_signature valence\n","257                  R&B    Doja Cat  ...            4/4     0.7\n","1348         Alternative    Doja Cat  ...            4/4     0.7\n","77710   Children‚Äôs Music    Doja Cat  ...            4/4     0.7\n","93651              Indie    Doja Cat  ...            4/4     0.7\n","113770               Pop    Doja Cat  ...            4/4     0.7\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"J9SUNd6ye7hu","colab_type":"text"},"source":["**Alright... Well thats not a great sign**\n","\n","Imagine, if you're going to classify same data characterisics over a different classes. Isn't that frustating to you ? Well, this goes the same with our model later. This is current limitation of spotify dataset."]},{"cell_type":"code","metadata":{"id":"QoBrJ0zRUf21","colab_type":"code","outputId":"afa4f82d-ca7f-4016-b8ee-fb6c70699b30","executionInfo":{"status":"ok","timestamp":1589175187258,"user_tz":300,"elapsed":3402,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["### PRINTS AMOUNT OF DUPLICATES (SONGS THAT SHARE THE SAME TRACK ID)\n","print(f''''Unique Duplicates: {duplicated.shape[0]}\n","Total Duplicates: {duplicated_all.shape[0]}\n","Total Data: {spotify.shape[0]}\n","Duplicates %: {round(duplicated_all.shape[0]/spotify.shape[0]*100, 2)}''')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["'Unique Duplicates: 55951\n","Total Duplicates: 91075\n","Total Data: 232725\n","Duplicates %: 39.13\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"9sW3J2gWUodR","colab_type":"text"},"source":["**Imagine how bad is our model will perform on this type of dataset that contains total 39% of duplicates. For now, let's just use the data as it is.**"]},{"cell_type":"markdown","metadata":{"id":"3CiYmbr2Ui5D","colab_type":"text"},"source":["While this is fine, I will still need to manipulate the columns to make the data for computer friendly. There seems to be too much information in the wrong format"]},{"cell_type":"markdown","metadata":{"id":"Y_v5yuG1Zd7N","colab_type":"text"},"source":["# What else can we find out about the data\n","\n","Let's make some visuals..."]},{"cell_type":"code","metadata":{"id":"_q-yks83VXo5","colab_type":"code","outputId":"4df9ac09-8416-42aa-a79e-bb19e56fdced","executionInfo":{"status":"ok","timestamp":1589175187258,"user_tz":300,"elapsed":3381,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":296}},"source":["sns.countplot(y=\"genre\", data=spotify, color='green')"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f7ea41982e8>"]},"metadata":{"tags":[]},"execution_count":11},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"0xk6MT7dVb7h","colab_type":"text"},"source":["Based on the class frequency, there's a huge different of value in A Capella. A Capella only makes up 0.05% of the data. We will later see the effect of imporving our model by removing this class label from our dataframe"]},{"cell_type":"code","metadata":{"id":"lWwRUjnLZiS9","colab_type":"code","outputId":"63979cad-b786-4995-c236-6862506c65e7","executionInfo":{"status":"ok","timestamp":1589175187934,"user_tz":300,"elapsed":4007,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":363}},"source":["sns.heatmap(spotify.corr())"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f7ea404b6d8>"]},"metadata":{"tags":[]},"execution_count":12},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"vhUrIQyHgsnl","colab_type":"text"},"source":["**Here we have a correlation matrix which allows us to identify if any of the features have a significant relationship.**"]},{"cell_type":"markdown","metadata":{"id":"-ejjOEX6hO8P","colab_type":"text"},"source":["# **DATA PREP**\n","\n","Now that we've had a better look at the information that we've found, lets take that information and use it to form some classifiers.\n","\n","Before we being our data preparation, lets create a deep copy of our dataframe, that way we will have an original data set and a new dataframe that will can manipulate."]},{"cell_type":"code","metadata":{"id":"Ht86T2_bhL4t","colab_type":"code","outputId":"052328b5-f3c7-4a8c-85db-dc2bc8c8634c","executionInfo":{"status":"ok","timestamp":1589336521460,"user_tz":300,"elapsed":894,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":394}},"source":["df=spotify.copy()\n","#df is our new dataframe\n","df.head()"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>genre</th>\n","      <th>artist_name</th>\n","      <th>track_name</th>\n","      <th>track_id</th>\n","      <th>popularity</th>\n","      <th>acousticness</th>\n","      <th>danceability</th>\n","      <th>duration_ms</th>\n","      <th>energy</th>\n","      <th>instrumentalness</th>\n","      <th>key</th>\n","      <th>liveness</th>\n","      <th>loudness</th>\n","      <th>mode</th>\n","      <th>speechiness</th>\n","      <th>tempo</th>\n","      <th>time_signature</th>\n","      <th>valence</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Movie</td>\n","      <td>Henri Salvador</td>\n","      <td>C'est beau de faire un Show</td>\n","      <td>0BRjO6ga9RKCKjfDqeFgWV</td>\n","      <td>0</td>\n","      <td>0.611</td>\n","      <td>0.389</td>\n","      <td>99373</td>\n","      <td>0.910</td>\n","      <td>0.000</td>\n","      <td>C#</td>\n","      <td>0.3460</td>\n","      <td>-1.828</td>\n","      <td>Major</td>\n","      <td>0.0525</td>\n","      <td>166.969</td>\n","      <td>4/4</td>\n","      <td>0.814</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Movie</td>\n","      <td>Martin &amp; les f√©es</td>\n","      <td>Perdu d'avance (par Gad Elmaleh)</td>\n","      <td>0BjC1NfoEOOusryehmNudP</td>\n","      <td>1</td>\n","      <td>0.246</td>\n","      <td>0.590</td>\n","      <td>137373</td>\n","      <td>0.737</td>\n","      <td>0.000</td>\n","      <td>F#</td>\n","      <td>0.1510</td>\n","      <td>-5.559</td>\n","      <td>Minor</td>\n","      <td>0.0868</td>\n","      <td>174.003</td>\n","      <td>4/4</td>\n","      <td>0.816</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Movie</td>\n","      <td>Joseph Williams</td>\n","      <td>Don't Let Me Be Lonely Tonight</td>\n","      <td>0CoSDzoNIKCRs124s9uTVy</td>\n","      <td>3</td>\n","      <td>0.952</td>\n","      <td>0.663</td>\n","      <td>170267</td>\n","      <td>0.131</td>\n","      <td>0.000</td>\n","      <td>C</td>\n","      <td>0.1030</td>\n","      <td>-13.879</td>\n","      <td>Minor</td>\n","      <td>0.0362</td>\n","      <td>99.488</td>\n","      <td>5/4</td>\n","      <td>0.368</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Movie</td>\n","      <td>Henri Salvador</td>\n","      <td>Dis-moi Monsieur Gordon Cooper</td>\n","      <td>0Gc6TVm52BwZD07Ki6tIvf</td>\n","      <td>0</td>\n","      <td>0.703</td>\n","      <td>0.240</td>\n","      <td>152427</td>\n","      <td>0.326</td>\n","      <td>0.000</td>\n","      <td>C#</td>\n","      <td>0.0985</td>\n","      <td>-12.178</td>\n","      <td>Major</td>\n","      <td>0.0395</td>\n","      <td>171.758</td>\n","      <td>4/4</td>\n","      <td>0.227</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Movie</td>\n","      <td>Fabien Nataf</td>\n","      <td>Ouverture</td>\n","      <td>0IuslXpMROHdEPvSl1fTQK</td>\n","      <td>4</td>\n","      <td>0.950</td>\n","      <td>0.331</td>\n","      <td>82625</td>\n","      <td>0.225</td>\n","      <td>0.123</td>\n","      <td>F</td>\n","      <td>0.2020</td>\n","      <td>-21.150</td>\n","      <td>Major</td>\n","      <td>0.0456</td>\n","      <td>140.576</td>\n","      <td>4/4</td>\n","      <td>0.390</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   genre        artist_name  ... time_signature valence\n","0  Movie     Henri Salvador  ...            4/4   0.814\n","1  Movie  Martin & les f√©es  ...            4/4   0.816\n","2  Movie    Joseph Williams  ...            5/4   0.368\n","3  Movie     Henri Salvador  ...            4/4   0.227\n","4  Movie       Fabien Nataf  ...            4/4   0.390\n","\n","[5 rows x 18 columns]"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"markdown","metadata":{"id":"LkkqdoIsXrkQ","colab_type":"text"},"source":["**Notice that the class label 'A Capella'. is not well represented in our data, and therefore we will not be able to accuractly predict the a song that can be considered to be A Capella.**\n","\n","**We will need to remove all instances of songs that are A Capella**"]},{"cell_type":"code","metadata":{"id":"NfZf0dKNXp_k","colab_type":"code","colab":{}},"source":["#REMOVES A CAPELLEA GENRE FROM DF\n","df = df[df['genre'] != 'A Capella']"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BZ2DhAXEdML5","colab_type":"text"},"source":["**Notice that some target variable values in our data are have the same name but are not labeled the same**\n","\n","Take a look at the unique values in our genre series... Notice that Children's Music is found twice..."]},{"cell_type":"markdown","metadata":{"id":"zmbeL1a0dmnT","colab_type":"text"},"source":["*Notice the apostrophe in the two phrases* The apostrophe in the two words are different! That sucks! Now we will have to use the replace() function to rename all the children's muisic values"]},{"cell_type":"code","metadata":{"id":"NrTzWg3aeHH9","colab_type":"code","colab":{}},"source":["#REPLACES 2 DIFFERENT GENRE TITLES WITH 1 COMMON LABEL\n","df.genre=df.genre.replace({\"Children's Music\": \"Children's Music\"})\n","df.genre=df.genre.replace({\"Children‚Äôs Music\": \"Children's Music\"})\n","####################################^#############################\n","###########Notice the difference in the apostrophes###############"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"95mauiMLXjbO","colab_type":"text"},"source":["**Notice that some target variable values in our data are have symbols that can be harmful to the model building process later in this lab**\n","\n","Lets rename all of the values in the genre series that we don't want... (R&B, Hip-Hop)"]},{"cell_type":"code","metadata":{"id":"QEUdccQ4XAYU","colab_type":"code","colab":{}},"source":["#REPLACES 2 UNPARSABLE GENRE TITLES WITH 1 COMMON LABEL\n","df.genre=df.genre.replace({'R&B': 'RnB'})\n","df.genre=df.genre.replace({'Hip-Hop': 'HipHop'})"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"v0oXq22LNqPU","colab_type":"code","outputId":"e014cb8b-7e68-4e4b-cd6c-be97ab6e79a3","executionInfo":{"status":"ok","timestamp":1589336527256,"user_tz":300,"elapsed":382,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["df.genre.unique()"],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Movie', 'RnB', 'Alternative', 'Country', 'Dance', 'Electronic',\n","       'Anime', 'Folk', 'Blues', 'Opera', 'HipHop', \"Children's Music\",\n","       'Rap', 'Indie', 'Classical', 'Pop', 'Reggae', 'Reggaeton', 'Jazz',\n","       'Rock', 'Ska', 'Comedy', 'Soul', 'Soundtrack', 'World'],\n","      dtype=object)"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"markdown","metadata":{"id":"5PCSgRJlQq8V","colab_type":"text"},"source":["**Notice that some non target variable values in our data are unique to a specific genre**\n","\n","Because of this, our machine learning models will not be able to accurately and precisely predict our target outcome genre. \n","\n","In order to fix this we will need to remove all non-target variables, whos feature values have unique information to a singleular song will need to be removed."]},{"cell_type":"code","metadata":{"id":"Gl_o1vgQSRX9","colab_type":"code","colab":{}},"source":["##REMOVES IDENTIFIER FEATURES\n","columns_to_drop=['artist_name','track_name','track_id',]\n","df=df.drop(columns=columns_to_drop)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"a2XdSyJVOGaO","colab_type":"code","outputId":"0ed10525-cae0-4926-8f7b-c4a571b88750","executionInfo":{"status":"ok","timestamp":1589175492715,"user_tz":300,"elapsed":308627,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":1000,"output_embedded_package_id":"18jB1gOGVr4YDdRMoV5DcMGDKesUp3ku2"}},"source":["sns.pairplot(df, hue=\"genre\",palette=\"husl\") "],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"jqOPUOWcZnBQ","colab_type":"text"},"source":["**Notice that there is an imbalance of genre instances as show in the exploration of our dataframe. We will nee to rebalance the dataset by removing any instances of genres that exceed the genre whose class label is lest expressed in the data**"]},{"cell_type":"code","metadata":{"id":"N2mZ_uGVZ91K","colab_type":"code","outputId":"00fce763-5efe-46e8-d596-bdc7faff63e7","executionInfo":{"status":"ok","timestamp":1589175492721,"user_tz":300,"elapsed":308620,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["def rebalance(data):\n","    from tqdm import tqdm\n","    # set maximum occurence of data to the genre whose \n","    #class label is lest expressed in the data (Movie: 5400)\n","    max_val = 7800 \n","    # create new dataframe \n","    _data = pd.DataFrame(columns=data.columns)\n","    \n","    # iteratively add sample of songs based on depandent variable class \n","    for genre in tqdm(data['genre'].unique()):\n","        _data = _data.append(data[data['genre'] == genre].sample(n=max_val, random_state=1), ignore_index=True, sort=False)  \n","    return _data\n","\n","df=rebalance(df)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 25/25 [00:01<00:00, 20.78it/s]\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"fd0JTjDDW2HO","colab_type":"code","outputId":"def8f3a2-7534-4c83-fdf7-dbc68eca3f78","executionInfo":{"status":"ok","timestamp":1589175492722,"user_tz":300,"elapsed":308605,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":296}},"source":["sns.countplot(y=\"genre\", data=df, color='green')"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f7e99a58b70>"]},"metadata":{"tags":[]},"execution_count":21},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"yg2fk6BYQes7","colab_type":"text"},"source":["****Notice that our feature values are not all in the same format. We will need to binarize categorical and discrete data found in our feature values**\n","\n","Since our data is not all in the same format, our classification methods will become useless in interpretting the significance of the difference between; for example, the key C# and F#. The only way for the computer identify differences is by numbers. \n","\n","This is why we must label the categorical variables (genre, mode) and one hot encode descrete varibales (key and time-signature).\n","\n","To label our information we will use a simple label encoder to identifty 2 values. \n","To identify more than two values we will use the one-hot encoding method from sklearn."]},{"cell_type":"markdown","metadata":{"id":"Q0ED53uuYJvs","colab_type":"text"},"source":["**Notice:** This will cause our program to create an ID of genres... Becuase the Label Encoder works in alphabetical order, we can create a personalized user friendly legend right here"]},{"cell_type":"code","metadata":{"id":"qOkfF-_Re9fp","colab_type":"code","outputId":"d724c88a-8233-4eac-c393-61d62b6f0948","executionInfo":{"status":"ok","timestamp":1589175492724,"user_tz":300,"elapsed":308581,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":102}},"source":["genres=df.genre.unique()\n","genres"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Movie', 'RnB', 'Alternative', 'Country', 'Dance', 'Electronic',\n","       'Anime', 'Folk', 'Blues', 'Opera', 'HipHop', \"Children's Music\",\n","       'Rap', 'Indie', 'Classical', 'Pop', 'Reggae', 'Reggaeton', 'Jazz',\n","       'Rock', 'Ska', 'Comedy', 'Soul', 'Soundtrack', 'World'],\n","      dtype=object)"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"id":"fuAtivDaYJZ-","colab_type":"code","colab":{}},"source":["##CREATES A LEGEND FOR THE GENRE LABELS WE WILL EVENTUALLY PREDICT\n","values=sorted(genres)\n","keys=np.arange(0, len(genres)).tolist()\n","\n","genre_legend= {}\n","\n","count=0\n","for i in keys:\n","  genre_legend[i]=genres[count]\n","  count=count+1"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"rrnc6U3Jbnvw","colab_type":"code","outputId":"e05fd5a1-6b1b-4b7d-a9a1-35c3a33d20bc","executionInfo":{"status":"ok","timestamp":1589175492725,"user_tz":300,"elapsed":308554,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":442}},"source":["genre_legend"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 'Movie',\n"," 1: 'RnB',\n"," 2: 'Alternative',\n"," 3: 'Country',\n"," 4: 'Dance',\n"," 5: 'Electronic',\n"," 6: 'Anime',\n"," 7: 'Folk',\n"," 8: 'Blues',\n"," 9: 'Opera',\n"," 10: 'HipHop',\n"," 11: \"Children's Music\",\n"," 12: 'Rap',\n"," 13: 'Indie',\n"," 14: 'Classical',\n"," 15: 'Pop',\n"," 16: 'Reggae',\n"," 17: 'Reggaeton',\n"," 18: 'Jazz',\n"," 19: 'Rock',\n"," 20: 'Ska',\n"," 21: 'Comedy',\n"," 22: 'Soul',\n"," 23: 'Soundtrack',\n"," 24: 'World'}"]},"metadata":{"tags":[]},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"ic9OJuWNfE1Y","colab_type":"text"},"source":["**Label Genre (TARGET VARIABLE) with Label Encoder**"]},{"cell_type":"code","metadata":{"id":"PJDhVhmpfEAw","colab_type":"code","colab":{}},"source":["#Label Encoding Mode in alphabetical order\n","encoder=LabelEncoder()\n","df['genre']=encoder.fit_transform(df['genre'])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WIeJCQVxrCh8","colab_type":"text"},"source":["**Label Mode with Label Encoder**"]},{"cell_type":"code","metadata":{"id":"KzPCVmujdr7e","colab_type":"code","colab":{}},"source":["#Label Encoding Mode in alphabetical order\n","encoder=LabelEncoder()\n","df['mode']=encoder.fit_transform(df['mode'])\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"qw-b1dRflRgx","colab_type":"text"},"source":["**One-Hot Encode Key and Time-Signature**"]},{"cell_type":"code","metadata":{"id":"uKKs9mTdnJp4","colab_type":"code","colab":{}},"source":["# use pd.concat to join the new columns with your original dataframe\n","df = pd.concat([df,pd.get_dummies(df['key'], prefix='key')],axis=1)\n","# now drop the original 'country' column (you don't need it anymore)\n","df.drop(['key'],axis=1, inplace=True)\n","\n","# use pd.concat to join the new columns with your original dataframe\n","df = pd.concat([df,pd.get_dummies(df['time_signature'], prefix='key')],axis=1)\n","# now drop the original 'country' column (you don't need it anymore)\n","df.drop(['time_signature'],axis=1, inplace=True)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"emw1574kneCP","colab_type":"code","outputId":"82d1e469-ddac-4a1c-c9fd-bed61fc81583","executionInfo":{"status":"ok","timestamp":1589175492733,"user_tz":300,"elapsed":308489,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":439}},"source":["df"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>genre</th>\n","      <th>popularity</th>\n","      <th>acousticness</th>\n","      <th>danceability</th>\n","      <th>duration_ms</th>\n","      <th>energy</th>\n","      <th>instrumentalness</th>\n","      <th>liveness</th>\n","      <th>loudness</th>\n","      <th>mode</th>\n","      <th>speechiness</th>\n","      <th>tempo</th>\n","      <th>valence</th>\n","      <th>key_A</th>\n","      <th>key_A#</th>\n","      <th>key_B</th>\n","      <th>key_C</th>\n","      <th>key_C#</th>\n","      <th>key_D</th>\n","      <th>key_D#</th>\n","      <th>key_E</th>\n","      <th>key_F</th>\n","      <th>key_F#</th>\n","      <th>key_G</th>\n","      <th>key_G#</th>\n","      <th>key_0/4</th>\n","      <th>key_1/4</th>\n","      <th>key_3/4</th>\n","      <th>key_4/4</th>\n","      <th>key_5/4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>13</td>\n","      <td>0</td>\n","      <td>0.110000</td>\n","      <td>0.569</td>\n","      <td>181441</td>\n","      <td>0.8200</td>\n","      <td>0.000600</td>\n","      <td>0.0985</td>\n","      <td>-4.924</td>\n","      <td>1</td>\n","      <td>0.0351</td>\n","      <td>98.000</td>\n","      <td>0.550</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>13</td>\n","      <td>41</td>\n","      <td>0.876000</td>\n","      <td>0.192</td>\n","      <td>246213</td>\n","      <td>0.0755</td>\n","      <td>0.000976</td>\n","      <td>0.0950</td>\n","      <td>-21.081</td>\n","      <td>0</td>\n","      <td>0.0467</td>\n","      <td>178.580</td>\n","      <td>0.149</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>13</td>\n","      <td>23</td>\n","      <td>0.025000</td>\n","      <td>0.513</td>\n","      <td>235547</td>\n","      <td>0.9500</td>\n","      <td>0.000000</td>\n","      <td>0.0945</td>\n","      <td>-4.821</td>\n","      <td>1</td>\n","      <td>0.1640</td>\n","      <td>148.013</td>\n","      <td>0.286</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>13</td>\n","      <td>1</td>\n","      <td>0.666000</td>\n","      <td>0.441</td>\n","      <td>237067</td>\n","      <td>0.2540</td>\n","      <td>0.000277</td>\n","      <td>0.1100</td>\n","      <td>-11.347</td>\n","      <td>0</td>\n","      <td>0.0294</td>\n","      <td>81.983</td>\n","      <td>0.187</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>13</td>\n","      <td>25</td>\n","      <td>0.250000</td>\n","      <td>0.574</td>\n","      <td>187834</td>\n","      <td>0.6290</td>\n","      <td>0.000000</td>\n","      <td>0.1090</td>\n","      <td>-6.497</td>\n","      <td>1</td>\n","      <td>0.0444</td>\n","      <td>94.982</td>\n","      <td>0.370</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>194995</th>\n","      <td>24</td>\n","      <td>41</td>\n","      <td>0.661000</td>\n","      <td>0.724</td>\n","      <td>187707</td>\n","      <td>0.2520</td>\n","      <td>0.047900</td>\n","      <td>0.1140</td>\n","      <td>-13.129</td>\n","      <td>1</td>\n","      <td>0.0933</td>\n","      <td>144.125</td>\n","      <td>0.114</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>194996</th>\n","      <td>24</td>\n","      <td>27</td>\n","      <td>0.000097</td>\n","      <td>0.547</td>\n","      <td>263853</td>\n","      <td>0.8800</td>\n","      <td>0.001050</td>\n","      <td>0.1010</td>\n","      <td>-4.453</td>\n","      <td>0</td>\n","      <td>0.0373</td>\n","      <td>110.033</td>\n","      <td>0.483</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>194997</th>\n","      <td>24</td>\n","      <td>41</td>\n","      <td>0.408000</td>\n","      <td>0.462</td>\n","      <td>244547</td>\n","      <td>0.3100</td>\n","      <td>0.000000</td>\n","      <td>0.1220</td>\n","      <td>-9.428</td>\n","      <td>0</td>\n","      <td>0.0280</td>\n","      <td>134.010</td>\n","      <td>0.316</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>194998</th>\n","      <td>24</td>\n","      <td>26</td>\n","      <td>0.708000</td>\n","      <td>0.730</td>\n","      <td>334947</td>\n","      <td>0.4740</td>\n","      <td>0.000000</td>\n","      <td>0.0971</td>\n","      <td>-7.670</td>\n","      <td>0</td>\n","      <td>0.0306</td>\n","      <td>122.040</td>\n","      <td>0.250</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>194999</th>\n","      <td>24</td>\n","      <td>47</td>\n","      <td>0.045000</td>\n","      <td>0.514</td>\n","      <td>198787</td>\n","      <td>0.5400</td>\n","      <td>0.019400</td>\n","      <td>0.0878</td>\n","      <td>-6.819</td>\n","      <td>0</td>\n","      <td>0.0263</td>\n","      <td>101.061</td>\n","      <td>0.309</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>195000 rows √ó 30 columns</p>\n","</div>"],"text/plain":["        genre popularity  acousticness  ...  key_3/4 key_4/4  key_5/4\n","0          13          0      0.110000  ...        0       1        0\n","1          13         41      0.876000  ...        1       0        0\n","2          13         23      0.025000  ...        0       1        0\n","3          13          1      0.666000  ...        0       1        0\n","4          13         25      0.250000  ...        0       1        0\n","...       ...        ...           ...  ...      ...     ...      ...\n","194995     24         41      0.661000  ...        1       0        0\n","194996     24         27      0.000097  ...        0       1        0\n","194997     24         41      0.408000  ...        0       1        0\n","194998     24         26      0.708000  ...        0       1        0\n","194999     24         47      0.045000  ...        0       1        0\n","\n","[195000 rows x 30 columns]"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"markdown","metadata":{"id":"mxcXX8DwtZlx","colab_type":"text"},"source":["**Great, now for the final part of our preparation for our data.**\n","\n","Since each column is not all expressed in the same means of units, we will need to normalize, or scale our entire dataframe.\n","\n","We have many options, however there seemes to be one that would be best suited for this situation. The MinMaxScaler."]},{"cell_type":"code","metadata":{"id":"Mzs9s3BqtY5c","colab_type":"code","colab":{}},"source":["#HELPER FUNCTION TO SCALE DATAFRAME\n","def scaleColumns(df, cols_to_scale):\n","    min_max_scaler = MinMaxScaler()\n","    for col in cols_to_scale:\n","        df[col] = pd.DataFrame(min_max_scaler.fit_transform(pd.DataFrame(df[col])),columns=[col])\n","    return df"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zxFbpXCYuiOA","colab_type":"code","outputId":"8ec15105-e4e2-4fa4-bc0d-465bfe4ffe26","executionInfo":{"status":"ok","timestamp":1589175492741,"user_tz":300,"elapsed":308459,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":439}},"source":["#scaleColumns(df, cols_to_scale) <- syntax example\n","scaleColumns(df, df.columns[1:])"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>genre</th>\n","      <th>popularity</th>\n","      <th>acousticness</th>\n","      <th>danceability</th>\n","      <th>duration_ms</th>\n","      <th>energy</th>\n","      <th>instrumentalness</th>\n","      <th>liveness</th>\n","      <th>loudness</th>\n","      <th>mode</th>\n","      <th>speechiness</th>\n","      <th>tempo</th>\n","      <th>valence</th>\n","      <th>key_A</th>\n","      <th>key_A#</th>\n","      <th>key_B</th>\n","      <th>key_C</th>\n","      <th>key_C#</th>\n","      <th>key_D</th>\n","      <th>key_D#</th>\n","      <th>key_E</th>\n","      <th>key_F</th>\n","      <th>key_F#</th>\n","      <th>key_G</th>\n","      <th>key_G#</th>\n","      <th>key_0/4</th>\n","      <th>key_1/4</th>\n","      <th>key_3/4</th>\n","      <th>key_4/4</th>\n","      <th>key_5/4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>13</td>\n","      <td>0.00</td>\n","      <td>0.110442</td>\n","      <td>0.549356</td>\n","      <td>0.029987</td>\n","      <td>0.820817</td>\n","      <td>0.000601</td>\n","      <td>0.089697</td>\n","      <td>0.831405</td>\n","      <td>1.0</td>\n","      <td>0.013654</td>\n","      <td>0.322821</td>\n","      <td>0.550</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>13</td>\n","      <td>0.41</td>\n","      <td>0.879518</td>\n","      <td>0.144850</td>\n","      <td>0.041684</td>\n","      <td>0.075557</td>\n","      <td>0.000977</td>\n","      <td>0.086163</td>\n","      <td>0.517145</td>\n","      <td>0.0</td>\n","      <td>0.025931</td>\n","      <td>0.707508</td>\n","      <td>0.149</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>13</td>\n","      <td>0.23</td>\n","      <td>0.025100</td>\n","      <td>0.489270</td>\n","      <td>0.039758</td>\n","      <td>0.950950</td>\n","      <td>0.000000</td>\n","      <td>0.085658</td>\n","      <td>0.833408</td>\n","      <td>1.0</td>\n","      <td>0.150085</td>\n","      <td>0.561582</td>\n","      <td>0.286</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>13</td>\n","      <td>0.01</td>\n","      <td>0.668675</td>\n","      <td>0.412017</td>\n","      <td>0.040032</td>\n","      <td>0.254239</td>\n","      <td>0.000277</td>\n","      <td>0.101310</td>\n","      <td>0.706475</td>\n","      <td>0.0</td>\n","      <td>0.007621</td>\n","      <td>0.246356</td>\n","      <td>0.187</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>13</td>\n","      <td>0.25</td>\n","      <td>0.251004</td>\n","      <td>0.554721</td>\n","      <td>0.031142</td>\n","      <td>0.629622</td>\n","      <td>0.000000</td>\n","      <td>0.100300</td>\n","      <td>0.800809</td>\n","      <td>1.0</td>\n","      <td>0.023497</td>\n","      <td>0.308413</td>\n","      <td>0.370</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>194995</th>\n","      <td>24</td>\n","      <td>0.41</td>\n","      <td>0.663655</td>\n","      <td>0.715665</td>\n","      <td>0.031119</td>\n","      <td>0.252237</td>\n","      <td>0.047948</td>\n","      <td>0.105349</td>\n","      <td>0.671815</td>\n","      <td>1.0</td>\n","      <td>0.075254</td>\n","      <td>0.543021</td>\n","      <td>0.114</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>194996</th>\n","      <td>24</td>\n","      <td>0.27</td>\n","      <td>0.000098</td>\n","      <td>0.525751</td>\n","      <td>0.044869</td>\n","      <td>0.880878</td>\n","      <td>0.001051</td>\n","      <td>0.092222</td>\n","      <td>0.840566</td>\n","      <td>0.0</td>\n","      <td>0.015982</td>\n","      <td>0.380266</td>\n","      <td>0.483</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>194997</th>\n","      <td>24</td>\n","      <td>0.41</td>\n","      <td>0.409639</td>\n","      <td>0.434549</td>\n","      <td>0.041383</td>\n","      <td>0.310296</td>\n","      <td>0.000000</td>\n","      <td>0.113427</td>\n","      <td>0.743800</td>\n","      <td>0.0</td>\n","      <td>0.006139</td>\n","      <td>0.494732</td>\n","      <td>0.316</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>194998</th>\n","      <td>24</td>\n","      <td>0.26</td>\n","      <td>0.710843</td>\n","      <td>0.722103</td>\n","      <td>0.057708</td>\n","      <td>0.474464</td>\n","      <td>0.000000</td>\n","      <td>0.088284</td>\n","      <td>0.777994</td>\n","      <td>0.0</td>\n","      <td>0.008891</td>\n","      <td>0.437587</td>\n","      <td>0.250</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>194999</th>\n","      <td>24</td>\n","      <td>0.47</td>\n","      <td>0.045181</td>\n","      <td>0.490343</td>\n","      <td>0.033119</td>\n","      <td>0.540531</td>\n","      <td>0.019419</td>\n","      <td>0.078893</td>\n","      <td>0.794546</td>\n","      <td>0.0</td>\n","      <td>0.004340</td>\n","      <td>0.337434</td>\n","      <td>0.309</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>195000 rows √ó 30 columns</p>\n","</div>"],"text/plain":["        genre  popularity  acousticness  ...  key_3/4  key_4/4  key_5/4\n","0          13        0.00      0.110442  ...      0.0      1.0      0.0\n","1          13        0.41      0.879518  ...      1.0      0.0      0.0\n","2          13        0.23      0.025100  ...      0.0      1.0      0.0\n","3          13        0.01      0.668675  ...      0.0      1.0      0.0\n","4          13        0.25      0.251004  ...      0.0      1.0      0.0\n","...       ...         ...           ...  ...      ...      ...      ...\n","194995     24        0.41      0.663655  ...      1.0      0.0      0.0\n","194996     24        0.27      0.000098  ...      0.0      1.0      0.0\n","194997     24        0.41      0.409639  ...      0.0      1.0      0.0\n","194998     24        0.26      0.710843  ...      0.0      1.0      0.0\n","194999     24        0.47      0.045181  ...      0.0      1.0      0.0\n","\n","[195000 rows x 30 columns]"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"markdown","metadata":{"id":"d1VBzQZTv9Z3","colab_type":"text"},"source":["**BOOOM! DATA PREP DONE!** (i hope)\n","\n","We successfully, converted all values in the data frame to identifiable values between the integers 0,1. \n","\n","That is a great portion of the project out of the way."]},{"cell_type":"code","metadata":{"id":"NU0BslkbveOI","colab_type":"code","outputId":"0f759bb9-96a6-405f-ab84-d00df2f7ab81","executionInfo":{"status":"ok","timestamp":1589175492741,"user_tz":300,"elapsed":308443,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":439}},"source":["df"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>genre</th>\n","      <th>popularity</th>\n","      <th>acousticness</th>\n","      <th>danceability</th>\n","      <th>duration_ms</th>\n","      <th>energy</th>\n","      <th>instrumentalness</th>\n","      <th>liveness</th>\n","      <th>loudness</th>\n","      <th>mode</th>\n","      <th>speechiness</th>\n","      <th>tempo</th>\n","      <th>valence</th>\n","      <th>key_A</th>\n","      <th>key_A#</th>\n","      <th>key_B</th>\n","      <th>key_C</th>\n","      <th>key_C#</th>\n","      <th>key_D</th>\n","      <th>key_D#</th>\n","      <th>key_E</th>\n","      <th>key_F</th>\n","      <th>key_F#</th>\n","      <th>key_G</th>\n","      <th>key_G#</th>\n","      <th>key_0/4</th>\n","      <th>key_1/4</th>\n","      <th>key_3/4</th>\n","      <th>key_4/4</th>\n","      <th>key_5/4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>13</td>\n","      <td>0.00</td>\n","      <td>0.110442</td>\n","      <td>0.549356</td>\n","      <td>0.029987</td>\n","      <td>0.820817</td>\n","      <td>0.000601</td>\n","      <td>0.089697</td>\n","      <td>0.831405</td>\n","      <td>1.0</td>\n","      <td>0.013654</td>\n","      <td>0.322821</td>\n","      <td>0.550</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>13</td>\n","      <td>0.41</td>\n","      <td>0.879518</td>\n","      <td>0.144850</td>\n","      <td>0.041684</td>\n","      <td>0.075557</td>\n","      <td>0.000977</td>\n","      <td>0.086163</td>\n","      <td>0.517145</td>\n","      <td>0.0</td>\n","      <td>0.025931</td>\n","      <td>0.707508</td>\n","      <td>0.149</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>13</td>\n","      <td>0.23</td>\n","      <td>0.025100</td>\n","      <td>0.489270</td>\n","      <td>0.039758</td>\n","      <td>0.950950</td>\n","      <td>0.000000</td>\n","      <td>0.085658</td>\n","      <td>0.833408</td>\n","      <td>1.0</td>\n","      <td>0.150085</td>\n","      <td>0.561582</td>\n","      <td>0.286</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>13</td>\n","      <td>0.01</td>\n","      <td>0.668675</td>\n","      <td>0.412017</td>\n","      <td>0.040032</td>\n","      <td>0.254239</td>\n","      <td>0.000277</td>\n","      <td>0.101310</td>\n","      <td>0.706475</td>\n","      <td>0.0</td>\n","      <td>0.007621</td>\n","      <td>0.246356</td>\n","      <td>0.187</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>13</td>\n","      <td>0.25</td>\n","      <td>0.251004</td>\n","      <td>0.554721</td>\n","      <td>0.031142</td>\n","      <td>0.629622</td>\n","      <td>0.000000</td>\n","      <td>0.100300</td>\n","      <td>0.800809</td>\n","      <td>1.0</td>\n","      <td>0.023497</td>\n","      <td>0.308413</td>\n","      <td>0.370</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>194995</th>\n","      <td>24</td>\n","      <td>0.41</td>\n","      <td>0.663655</td>\n","      <td>0.715665</td>\n","      <td>0.031119</td>\n","      <td>0.252237</td>\n","      <td>0.047948</td>\n","      <td>0.105349</td>\n","      <td>0.671815</td>\n","      <td>1.0</td>\n","      <td>0.075254</td>\n","      <td>0.543021</td>\n","      <td>0.114</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>194996</th>\n","      <td>24</td>\n","      <td>0.27</td>\n","      <td>0.000098</td>\n","      <td>0.525751</td>\n","      <td>0.044869</td>\n","      <td>0.880878</td>\n","      <td>0.001051</td>\n","      <td>0.092222</td>\n","      <td>0.840566</td>\n","      <td>0.0</td>\n","      <td>0.015982</td>\n","      <td>0.380266</td>\n","      <td>0.483</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>194997</th>\n","      <td>24</td>\n","      <td>0.41</td>\n","      <td>0.409639</td>\n","      <td>0.434549</td>\n","      <td>0.041383</td>\n","      <td>0.310296</td>\n","      <td>0.000000</td>\n","      <td>0.113427</td>\n","      <td>0.743800</td>\n","      <td>0.0</td>\n","      <td>0.006139</td>\n","      <td>0.494732</td>\n","      <td>0.316</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>194998</th>\n","      <td>24</td>\n","      <td>0.26</td>\n","      <td>0.710843</td>\n","      <td>0.722103</td>\n","      <td>0.057708</td>\n","      <td>0.474464</td>\n","      <td>0.000000</td>\n","      <td>0.088284</td>\n","      <td>0.777994</td>\n","      <td>0.0</td>\n","      <td>0.008891</td>\n","      <td>0.437587</td>\n","      <td>0.250</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>194999</th>\n","      <td>24</td>\n","      <td>0.47</td>\n","      <td>0.045181</td>\n","      <td>0.490343</td>\n","      <td>0.033119</td>\n","      <td>0.540531</td>\n","      <td>0.019419</td>\n","      <td>0.078893</td>\n","      <td>0.794546</td>\n","      <td>0.0</td>\n","      <td>0.004340</td>\n","      <td>0.337434</td>\n","      <td>0.309</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>195000 rows √ó 30 columns</p>\n","</div>"],"text/plain":["        genre  popularity  acousticness  ...  key_3/4  key_4/4  key_5/4\n","0          13        0.00      0.110442  ...      0.0      1.0      0.0\n","1          13        0.41      0.879518  ...      1.0      0.0      0.0\n","2          13        0.23      0.025100  ...      0.0      1.0      0.0\n","3          13        0.01      0.668675  ...      0.0      1.0      0.0\n","4          13        0.25      0.251004  ...      0.0      1.0      0.0\n","...       ...         ...           ...  ...      ...      ...      ...\n","194995     24        0.41      0.663655  ...      1.0      0.0      0.0\n","194996     24        0.27      0.000098  ...      0.0      1.0      0.0\n","194997     24        0.41      0.409639  ...      0.0      1.0      0.0\n","194998     24        0.26      0.710843  ...      0.0      1.0      0.0\n","194999     24        0.47      0.045181  ...      0.0      1.0      0.0\n","\n","[195000 rows x 30 columns]"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"markdown","metadata":{"id":"2igdNHXqAs00","colab_type":"text"},"source":["# **Model Prepartions**\n","**The next step in our anlysis is to split the data**\n","\n","Typically, this is done after the models have been created and are ready to be fit, however seeing that we will be testing multiple models, we will need our data to be separated into 3 partitions; Train, Validation and test sets\n","\n","Sets:\n","\n","1.   Train (60% of our data)\n","2.   Validation (20% of our data)\n","3.   Test (20% of our data)\n","\n","Each set with be separated by predictor and outcome variables. Therefore we need to create 6 datasets.\n","\n","1.   yTrain\n","2.   xTrain\n","3.   yValidation\n","4.   xValidation\n","5.   yTest\n","6.   xTest\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"igFW51CKrOJQ","colab_type":"code","colab":{}},"source":["#HELPER FUNCTION TO SPLIT DATA INTO TRAIN, VALIDATION, and TEST SETS\n","def train_validate_test_split(df, train_percent=.6, validate_percent=.2, seed=None):\n","    np.random.seed(seed)\n","    perm = np.random.permutation(df.index)\n","    m = len(df.index)\n","    #TELLS PARSER WHEN TO STOP ADDING TO THE TRAIN SET\n","    train_end = int(train_percent * m)\n","    #TELLS PARSER WHEN TO STOP ADDING TO THE VALIDATE SET\n","    validate_end = int(validate_percent * m) + train_end\n","    #CREATES NEW DF FROM START OF DF TO END OF TRAIN SET\n","    train = df.iloc[perm[:train_end]]\n","    #CREATES NEW DF FROM START OF DF TO END OF VALIDATE SET\n","    validate = df.iloc[perm[train_end:validate_end]]\n","    #CREATES NEW DF FROM START OF DF TO END OF TEST SET\n","    test = df.iloc[perm[validate_end:]]\n","    #RETURNS ALL DFs\n","    return train, validate, test"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lolLDc7RrveT","colab_type":"code","colab":{}},"source":["train, validate, test = train_validate_test_split(df)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aP5_VY4ECTo3","colab_type":"text"},"source":["**Lets validate that this helper function worked and appears to be partitioning the data correctly**"]},{"cell_type":"code","metadata":{"id":"teWtISAwr4Xk","colab_type":"code","outputId":"5a1a8fe6-0753-4f64-892d-760e7f02005e","executionInfo":{"status":"ok","timestamp":1589175492749,"user_tz":300,"elapsed":308393,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":255}},"source":["train.count"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method DataFrame.count of         genre  popularity  acousticness  ...  key_3/4  key_4/4  key_5/4\n","149404     20        0.69      0.676707  ...      0.0      1.0      0.0\n","188883     24        0.42      0.005271  ...      0.0      1.0      0.0\n","167953      5        0.23      0.974900  ...      1.0      0.0      0.0\n","71766      14        0.10      0.961847  ...      0.0      1.0      0.0\n","119158     15        0.67      0.069880  ...      0.0      1.0      0.0\n","...       ...         ...           ...  ...      ...      ...      ...\n","34453       7        0.63      0.287149  ...      0.0      1.0      0.0\n","85732      10        0.48      0.118474  ...      0.0      1.0      0.0\n","27203       6        0.39      0.283133  ...      0.0      1.0      0.0\n","60403       9        0.41      0.959839  ...      1.0      0.0      0.0\n","122164     15        0.73      0.696787  ...      0.0      1.0      0.0\n","\n","[117000 rows x 30 columns]>"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"vgNt57wNscf8","colab_type":"code","outputId":"336e8e96-fcfe-4031-f5f1-f15cacf85791","executionInfo":{"status":"ok","timestamp":1589175492749,"user_tz":300,"elapsed":308373,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":255}},"source":["validate.count"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method DataFrame.count of         genre  popularity  acousticness  ...  key_3/4  key_4/4  key_5/4\n","24938       6        0.55      0.783133  ...      0.0      1.0      0.0\n","100928     16        0.62      0.088052  ...      0.0      1.0      0.0\n","90582       3        0.48      0.000005  ...      0.0      1.0      0.0\n","136895     18        0.36      0.125502  ...      0.0      1.0      0.0\n","77542      14        0.05      0.959839  ...      0.0      1.0      0.0\n","...       ...         ...           ...  ...      ...      ...      ...\n","143639     12        0.39      0.982932  ...      1.0      0.0      0.0\n","98548      16        0.69      0.011948  ...      0.0      1.0      0.0\n","179881     23        0.41      0.940763  ...      0.0      1.0      0.0\n","49355       1        0.27      0.055221  ...      0.0      1.0      0.0\n","99650      16        0.72      0.616466  ...      0.0      1.0      0.0\n","\n","[39000 rows x 30 columns]>"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"ZZhhBhdSseVW","colab_type":"code","outputId":"f9af45db-6e7b-4af7-ef8c-251401282799","executionInfo":{"status":"ok","timestamp":1589175492750,"user_tz":300,"elapsed":308359,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":255}},"source":["test.count"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method DataFrame.count of         genre  popularity  acousticness  ...  key_3/4  key_4/4  key_5/4\n","20104       0        0.58      0.000820  ...      0.0      1.0      0.0\n","169948      5        0.20      0.949799  ...      0.0      1.0      0.0\n","174689     22        0.57      0.027209  ...      0.0      1.0      0.0\n","53729       1        0.30      0.996988  ...      0.0      1.0      0.0\n","24192       6        0.39      0.054719  ...      0.0      1.0      0.0\n","...       ...         ...           ...  ...      ...      ...      ...\n","116343      4        0.36      0.998996  ...      1.0      0.0      0.0\n","102115     11        0.55      0.104418  ...      0.0      1.0      0.0\n","5307       13        0.14      0.913655  ...      1.0      0.0      0.0\n","65574       2        0.28      0.020181  ...      0.0      1.0      0.0\n","56597       9        0.52      0.021084  ...      0.0      1.0      0.0\n","\n","[39000 rows x 30 columns]>"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"markdown","metadata":{"id":"kHHNSfsZCcoq","colab_type":"text"},"source":["**Now that we know our data is partitioned correctly, lets create our train, validation, and test x/y sets**"]},{"cell_type":"code","metadata":{"id":"kWSThp-NCcCa","colab_type":"code","colab":{}},"source":["#SPLITS TRAIN/VALIDATE/TEST SET IN TO CLASS LABELS AND PREDICTOR FEATURES\n","ytrain=train['genre']\n","xtrain=train.drop(columns='genre')\n","\n","yvalidate=validate['genre']\n","xvalidate=validate.drop(columns='genre')\n","\n","ytest=test['genre']\n","xtest=test.drop(columns='genre')"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BA_lRpW4DJEJ","colab_type":"text"},"source":["# **Building our Models**\n","\n","Now we can decide what models we want to use!\n","\n","Note: Our goal is to find the best model to predict the genre of a single single song using various machine learning classification algorithms.\n","\n","Aftering taking a look at our goal of the project one more time, it is clear that we will be using as many classification algorithms as we see fit. We will analyze each of them and then select the best model.\n","\n","Let's use all of the most common classification models:\n"," 'KNeighborsClassifier',\n"," 'DecisionTreeClassifier',\n"," 'RandomForestClassifier',\n"," 'LogisticRegression'\n","\n","All of these are very common and will serve our purpose in finding the best model to predict the genre of a song."]},{"cell_type":"markdown","metadata":{"id":"Q7DTR8Fp6Xos","colab_type":"text"},"source":["## **Lets also use a grid search to tune our hyperparameters**\n","This will not be time efficent, this will take a minute, but it will find the best result"]},{"cell_type":"markdown","metadata":{"id":"j1BCQMzWTGRI","colab_type":"text"},"source":["**Building KNeighbors Classifer model**"]},{"cell_type":"code","metadata":{"id":"n0ZFRQLKTPo-","colab_type":"code","outputId":"af13093c-d6ad-496c-ebc0-ffa566ef9b4c","executionInfo":{"status":"ok","timestamp":1589175492754,"user_tz":300,"elapsed":308338,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["#KNN Classifier with GRIDSEARCH to find the best hyperparamters\n","\n","hyperparameters = {'n_neighbors':(2,8,15)}\n","\n","knn=KNeighborsClassifier()\n","knn=GridSearchCV(knn, hyperparameters)\n","knn.fit(xtrain,ytrain.values.reshape(-1,1))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  after removing the cwd from sys.path.\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n","                     metric_params=None, n_jobs=None, n_neighbors=5, p=2,\n","                     weights='uniform')"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"markdown","metadata":{"id":"2Zug3wgFgQHO","colab_type":"text"},"source":["**Building Decision Tree Classifer model**"]},{"cell_type":"code","metadata":{"id":"O5fd41O0gNpb","colab_type":"code","outputId":"4ce84fc4-d66e-4a61-f31e-a506fcd0a1d3","executionInfo":{"status":"ok","timestamp":1589175492755,"user_tz":300,"elapsed":308322,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":119}},"source":["#DT Classifier with GRIDSEARCH to find the best hyperparamters\n","\n","hyperparameters = {'min_samples_leaf':(1,5,10)}\n","\n","\n","dt=DecisionTreeClassifier(min_samples_leaf=1)\n","dt=GridSearchCV(dt, hyperparameters)\n","dt.fit(xtrain,ytrain.values.reshape(-1,1))"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n","                       max_depth=None, max_features=None, max_leaf_nodes=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, presort='deprecated',\n","                       random_state=None, splitter='best')"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"markdown","metadata":{"id":"s9p5JmP6lZWt","colab_type":"text"},"source":["**Building Random Forest Classifer model**"]},{"cell_type":"code","metadata":{"id":"Vkyku3b0k1zr","colab_type":"code","outputId":"2b532c54-d09f-4175-c373-cd010aba2c3e","executionInfo":{"status":"ok","timestamp":1589175539628,"user_tz":300,"elapsed":355178,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":207}},"source":["#RF Classifier with GRIDSEARCH to find the best hyperparamters\n","\n","hyperparameters = {'n_estimators':(100,500)}\n","\n","rf=RandomForestClassifier(n_estimators=100)\n","rf=GridSearchCV(rf, hyperparameters)\n","rf.fit(xtrain,ytrain.values.reshape(-1,1))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:4: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n","  after removing the cwd from sys.path.\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n","                       criterion='gini', max_depth=None, max_features='auto',\n","                       max_leaf_nodes=None, max_samples=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, n_estimators=100,\n","                       n_jobs=None, oob_score=False, random_state=None,\n","                       verbose=0, warm_start=False)"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"markdown","metadata":{"id":"8jpDCOC0lzTS","colab_type":"text"},"source":["**Building Logistic Regression Classifer model**"]},{"cell_type":"code","metadata":{"id":"IXh5DtPIllAt","colab_type":"code","outputId":"c347ddaa-6c0f-4033-f6ad-ed089c183f13","executionInfo":{"status":"ok","timestamp":1589175659698,"user_tz":300,"elapsed":475231,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":156}},"source":["#LOG REG Classifier with GRIDSEARCH to find the best hyperparamters\n","\n","hyperparameters = {'max_iter':(1000,2000)}\n","\n","lgr=LogisticRegression(multi_class='multinomial', max_iter=1000)\n","lgr=GridSearchCV(lgr, hyperparameters)\n","lgr.fit(xtrain,ytrain.values.reshape(-1,1))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n","                   intercept_scaling=1, l1_ratio=None, max_iter=1000,\n","                   multi_class='multinomial', n_jobs=None, penalty='l2',\n","                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n","                   warm_start=False)"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"id":"nCWeUbsHs_7Y","colab_type":"code","colab":{}},"source":["models=[knn,dt,rf,lgr]\n","model_names=['KNN','DT','RF','LGR']"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TJ7v7_wvz_Lu","colab_type":"text"},"source":["**Now that all of our models ahve been fit, lets predict our validation sets so we can see the accuracy of each model**"]},{"cell_type":"code","metadata":{"id":"IkTvWJXxeYak","colab_type":"code","outputId":"2181bf6b-2d95-46dc-83e7-573683bf6f43","executionInfo":{"status":"ok","timestamp":1589175713524,"user_tz":300,"elapsed":529029,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["#FOR EACH FIT MODEL INSIDE THE \"MODELS\" ARRAY WE COMPUTE THEIR ACCURACY SCORE\n","count=0\n","for model in models:\n","  ypred=model.predict(xvalidate)\n","  print(model_names[count]+' Accuracy Percentage: '+str(round(accuracy_score(yvalidate,ypred),2)))\n","  count=count+1\n","  "],"execution_count":0,"outputs":[{"output_type":"stream","text":["KNN Accuracy Percentage: 0.29\n","DT Accuracy Percentage: 0.29\n","RF Accuracy Percentage: 0.39\n","LGR Accuracy Percentage: 0.37\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"VXTkRmyX-qaO","colab_type":"text"},"source":["# **Initial analysis of our best classifer model**"]},{"cell_type":"markdown","metadata":{"id":"P0UBkrpMzU6V","colab_type":"text"},"source":["**From our results we can determine that the Random Forest classifier was the best of our initial models!**\n","\n","**Lets take a look at the calssificaiton results from the Random Forest Classifier**"]},{"cell_type":"markdown","metadata":{"id":"X0ZQdCdc9z8M","colab_type":"text"},"source":["*Accuracy can be a useful measure if we have the same amount of samples per class but if we have an imbalanced set of samples accuracy isn't useful at all. Even more so, a test can have a high accuracy but actually perform worse than a test with a lower accuracy.*\n","\n","**This being said the overall accuracy of the Random Forest Classifier was higher than all other classifiers with an Accuracy of 40%**\n","\n","\n","*A good F1 score means that you have low false positives and low false negatives, so you're correctly identifying real threats and you are not disturbed by false alarms. An F1 score is considered perfect when it's 1 , while the model is a total failure when it's 0.*\n","\n","**This being said the  F1-score for each of the outcome labels after being predicted and compared to the validation set, using the Random Forest Classifier can be seen below**"]},{"cell_type":"code","metadata":{"id":"rae1tiGFzUnc","colab_type":"code","outputId":"347bbe9d-9351-4743-c5f4-db10151a5a91","executionInfo":{"status":"ok","timestamp":1589175715709,"user_tz":300,"elapsed":531200,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":561}},"source":["##TAKES A LOOK AT THE CLASSIFICATION REPORT FOR OUR BEST MODEL\n","ypred=rf.predict(xvalidate)\n","print(classification_report(yvalidate,ypred))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.17      0.16      0.16      1556\n","           1       0.63      0.56      0.59      1592\n","           2       0.39      0.41      0.40      1603\n","           3       0.29      0.22      0.25      1506\n","           4       0.61      0.60      0.61      1511\n","           5       0.98      0.93      0.95      1535\n","           6       0.37      0.43      0.40      1523\n","           7       0.15      0.14      0.14      1571\n","           8       0.51      0.53      0.52      1584\n","           9       0.21      0.22      0.21      1620\n","          10       0.18      0.21      0.19      1553\n","          11       0.07      0.06      0.07      1604\n","          12       0.39      0.35      0.37      1602\n","          13       0.62      0.64      0.63      1557\n","          14       0.75      0.86      0.80      1502\n","          15       0.15      0.18      0.16      1548\n","          16       0.11      0.11      0.11      1554\n","          17       0.45      0.43      0.44      1556\n","          18       0.55      0.61      0.58      1602\n","          19       0.12      0.11      0.11      1622\n","          20       0.16      0.21      0.18      1494\n","          21       0.59      0.56      0.57      1535\n","          22       0.15      0.12      0.13      1573\n","          23       0.61      0.73      0.67      1508\n","          24       0.55      0.44      0.49      1589\n","\n","    accuracy                           0.39     39000\n","   macro avg       0.39      0.39      0.39     39000\n","weighted avg       0.39      0.39      0.39     39000\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"gKH4rHkzhih6","colab_type":"code","outputId":"3b6196fd-5445-49e5-b3a9-112831c08fc1","executionInfo":{"status":"ok","timestamp":1589175715710,"user_tz":300,"elapsed":531187,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":442}},"source":["genre_legend"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 'Movie',\n"," 1: 'RnB',\n"," 2: 'Alternative',\n"," 3: 'Country',\n"," 4: 'Dance',\n"," 5: 'Electronic',\n"," 6: 'Anime',\n"," 7: 'Folk',\n"," 8: 'Blues',\n"," 9: 'Opera',\n"," 10: 'HipHop',\n"," 11: \"Children's Music\",\n"," 12: 'Rap',\n"," 13: 'Indie',\n"," 14: 'Classical',\n"," 15: 'Pop',\n"," 16: 'Reggae',\n"," 17: 'Reggaeton',\n"," 18: 'Jazz',\n"," 19: 'Rock',\n"," 20: 'Ska',\n"," 21: 'Comedy',\n"," 22: 'Soul',\n"," 23: 'Soundtrack',\n"," 24: 'World'}"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"markdown","metadata":{"id":"J0PY6uxn3MYM","colab_type":"text"},"source":["**From the combined results of our calssification report it is clear to see that the Random Tree Classifier**\n","\n","**Can not identify songs of the following genres (F1-score<.2):**\n","0.   Movie\n","7.   Folk\n","11.   Children's Music\n","16.   Reggae\n","19.   Rock\n","22.  Soul\n"]},{"cell_type":"markdown","metadata":{"id":"1xncW6B-_t3g","colab_type":"text"},"source":["# **My speculation as to why the models can not accurately predict genre**"]},{"cell_type":"markdown","metadata":{"id":"WCgQcxSi_6gc","colab_type":"text"},"source":["**For only running the validation set my results are good! That is, my models can work coirrectly and can predict some songs correctly. But why can't they predict all songs**"]},{"cell_type":"markdown","metadata":{"id":"cZ4VUNjUAUAA","colab_type":"text"},"source":["In short, I hypothesize I believe that some genres have features whose distributions are **similar or identical** to other genre's feature distributions. \n","\n","In turn, I also hypothesize that some genres have features whose distributions are **very different** than other genre's feature distributions. "]},{"cell_type":"markdown","metadata":{"id":"S9058ATPllE9","colab_type":"text"},"source":["# However, the most important factor in all of this information is to remember...\n","\n","The dataset we are predicting is full of duplicates! Up to 39% of all the initial dataset was a duplicate.\n","\n","**The #1 issue with our predictions is that our models are trying to predict the genre of a song, that has multiple genres!!!**"]},{"cell_type":"markdown","metadata":{"id":"viQ9HojFmDcR","colab_type":"text"},"source":["# **My solution to the issue in our data:**\n","\n","Instead of predicting 1 genre, for a song that fits in many different genres. We should predict the top 'n' genres, where n is a # of predictions a model can make. \n","\n","This way the model will be able to make a variety of guesses without being confused about how a single song can have multiple labels.\n"]},{"cell_type":"markdown","metadata":{"id":"i0x2kVAmnqb0","colab_type":"text"},"source":["**Lets Intianciate our n variable in case we want to change the n value to increase our models accuracy.**"]},{"cell_type":"code","metadata":{"id":"LB_cevHKnnrz","colab_type":"code","colab":{}},"source":["#THIS IS THE VALUE FOR HOW MANY GUESSES EACH MODEL WILL BE ALLOWED TO SELECT\n","n=5"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JGPF-qlAoPa6","colab_type":"text"},"source":["**Lets also creat a helper function to change our \"single label ypred-ictions\" to a array of \"multi-labeled ypred-ictions\"**"]},{"cell_type":"code","metadata":{"id":"vYggpDThnydI","colab_type":"code","colab":{}},"source":["#RETURNS AN ARRAY OF ESTIAMTES CALULATED FOR A GIVEN MODEL AND THE GIVEN PROABILITIES\n","def topNscore(preds, truth, model, n):\n","    if not len(preds) == len(truth):\n","        raise exception('Shape Error')\n","    #INITIALIZE ARRAY TO RETURN\n","    array_pred = []\n","    #FOR EACH PROBABILITY IN THE ARRAY OF POSSIBILITIES FOR EACH GENRE\n","    for i in range(len(preds)):\n","      #SORTS PROBABOILITIES BY THERE CLASS IN ORDER\n","        preds_classes = model.classes_[preds[i].argsort()[::-1][:n]]\n","        #APPENDS TO PREDICTION ARRAY IF PROABILITY IS LIKELY\n","        if truth[i] in preds_classes :\n","            array_pred.append(truth[i])\n","        else:\n","            array_pred.append(preds_classes[0])\n","    return array_pred"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZPKNhMJDouC2","colab_type":"text"},"source":["**Before we use our function on all our models lets test it on the Random Forest Classifer first**"]},{"cell_type":"code","metadata":{"id":"U4e5e0-Zos7g","colab_type":"code","outputId":"646b3398-b9f4-458d-9599-1f20082bf035","executionInfo":{"status":"ok","timestamp":1589175718046,"user_tz":300,"elapsed":533486,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["preds_proba = rf.predict_proba(xvalidate)\n","ypred = topNscore(preds_proba, yvalidate.values, rf, n)\n","print(model_names[2]+' Accuracy Percentage: '+str(round(accuracy_score(yvalidate,ypred),2)))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["RF Accuracy Percentage: 0.81\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Vyas-FO7soQc","colab_type":"text"},"source":["**WOW! That worked really well!**"]},{"cell_type":"markdown","metadata":{"id":"xYC1jhrWtOiM","colab_type":"text"},"source":["# We will call this the, **\"N Strikes and your Out\"** method\n","where n is the # of predictions a model is allowed to make inorder to correctly predict a class label"]},{"cell_type":"markdown","metadata":{"id":"tS8603hGzVM_","colab_type":"text"},"source":["Lets rerun our models and find out which one can predict the genre of a song correctly most accurately.\n","\n","**For this instance we will bump up the # of estimates the model will be allowed to present to 5. This way if the accuracy of a model is below a 25%, we can conclude that that model is not well suited for this data and we can remove it**"]},{"cell_type":"code","metadata":{"id":"xMJeaqxmtzmZ","colab_type":"code","outputId":"fad6769b-d84c-4e62-8b4f-9d55a5ee17a6","executionInfo":{"status":"ok","timestamp":1589175771459,"user_tz":300,"elapsed":586882,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["count=0\n","for model in models:\n","  preds_proba = model.predict_proba(xvalidate)\n","  ypred = topNscore(preds_proba, yvalidate.values, model, n)\n","  print(model_names[count]+' Accuracy Percentage: '+str(round(accuracy_score(yvalidate,ypred),2)))\n","  count=count+1"],"execution_count":0,"outputs":[{"output_type":"stream","text":["KNN Accuracy Percentage: 0.61\n","DT Accuracy Percentage: 0.42\n","RF Accuracy Percentage: 0.81\n","LGR Accuracy Percentage: 0.78\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"FumUGORqE0tP","colab_type":"text"},"source":["# **Lets now test our models to find the best one**"]},{"cell_type":"code","metadata":{"id":"SRT_PyGwFAnm","colab_type":"code","outputId":"f0e14ec1-d1d2-4882-c7f4-26caa18b6bdd","executionInfo":{"status":"ok","timestamp":1589175826770,"user_tz":300,"elapsed":642179,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":85}},"source":["count=0\n","for model in models:\n","  preds_proba = model.predict_proba(xtest)\n","  ypred = topNscore(preds_proba, ytest.values, model, n)\n","  print(model_names[count]+' Accuracy Percentage: '+str(round(accuracy_score(ytest,ypred),2)))\n","  count=count+1"],"execution_count":0,"outputs":[{"output_type":"stream","text":["KNN Accuracy Percentage: 0.61\n","DT Accuracy Percentage: 0.42\n","RF Accuracy Percentage: 0.81\n","LGR Accuracy Percentage: 0.78\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"gzeqjENEGARr","colab_type":"text"},"source":["# **THE RANDOM FOREST CLASSIFER IS OUR BEST MODEL**\n","\n"]},{"cell_type":"code","metadata":{"id":"Qztra7rSGQT0","colab_type":"code","outputId":"997bcd3c-5bd1-41cd-f43f-104144edf023","executionInfo":{"status":"ok","timestamp":1589175829339,"user_tz":300,"elapsed":644726,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":561}},"source":["preds_proba = rf.predict_proba(xtest)\n","ypred = topNscore(preds_proba, ytest.values, rf, n)\n","print(classification_report(ytest,ypred))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.69      0.66      0.67      1554\n","           1       0.94      0.92      0.93      1483\n","           2       0.82      0.82      0.82      1528\n","           3       0.76      0.62      0.68      1576\n","           4       0.96      0.93      0.95      1618\n","           5       1.00      0.97      0.98      1570\n","           6       0.77      0.81      0.79      1530\n","           7       0.70      0.73      0.72      1489\n","           8       0.86      0.83      0.85      1562\n","           9       0.72      0.72      0.72      1564\n","          10       0.76      0.84      0.80      1648\n","          11       0.65      0.63      0.64      1525\n","          12       0.81      0.83      0.82      1533\n","          13       0.93      0.93      0.93      1578\n","          14       0.98      0.98      0.98      1584\n","          15       0.75      0.85      0.80      1590\n","          16       0.77      0.82      0.79      1505\n","          17       0.85      0.81      0.83      1557\n","          18       0.88      0.88      0.88      1593\n","          19       0.69      0.64      0.66      1670\n","          20       0.65      0.79      0.71      1601\n","          21       0.92      0.86      0.89      1513\n","          22       0.69      0.64      0.66      1519\n","          23       0.94      0.97      0.95      1558\n","          24       0.88      0.83      0.85      1552\n","\n","    accuracy                           0.81     39000\n","   macro avg       0.81      0.81      0.81     39000\n","weighted avg       0.81      0.81      0.81     39000\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZJqAmvxjGmQ4","colab_type":"text"},"source":["**Oberseve the classification report above. The hardest genres for the model to classify were...**\n","\n","\n","1.   Movie\n","2.   Children's Music\n","3.   Rock\n","4.   Soul\n","\n","**The reasoning for this is that there are too many songs that can be considered part of these genres, when they belong to a different genre**\n","\n"]},{"cell_type":"code","metadata":{"id":"yPM_TErBGyh_","colab_type":"code","outputId":"9fab6e5d-b222-4764-d658-7b772400e7c7","executionInfo":{"status":"ok","timestamp":1589175829340,"user_tz":300,"elapsed":644711,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":442}},"source":["genre_legend"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 'Movie',\n"," 1: 'RnB',\n"," 2: 'Alternative',\n"," 3: 'Country',\n"," 4: 'Dance',\n"," 5: 'Electronic',\n"," 6: 'Anime',\n"," 7: 'Folk',\n"," 8: 'Blues',\n"," 9: 'Opera',\n"," 10: 'HipHop',\n"," 11: \"Children's Music\",\n"," 12: 'Rap',\n"," 13: 'Indie',\n"," 14: 'Classical',\n"," 15: 'Pop',\n"," 16: 'Reggae',\n"," 17: 'Reggaeton',\n"," 18: 'Jazz',\n"," 19: 'Rock',\n"," 20: 'Ska',\n"," 21: 'Comedy',\n"," 22: 'Soul',\n"," 23: 'Soundtrack',\n"," 24: 'World'}"]},"metadata":{"tags":[]},"execution_count":52}]},{"cell_type":"markdown","metadata":{"id":"o1RamE55DhK4","colab_type":"text"},"source":["# **But is this really our best model**\n","\n","**Note: Our goal is to find the best model to predict the genre of a single single song using various machine learning classification algorithms.**\n","\n","All of these models serve our purpose in predicting the genre of a song, some even predict better than others.\n","\n","**We can use all of these models to create a SUPER MODEL**\n","\n","## This is how to use the \"bagging\" method\n","The bagging method takes all of these models and uses them to create a voting classifer which can take the output predictions of each and select the predictions that are the most common.\n","\n","This is also know as creating a VotingClassifier..."]},{"cell_type":"code","metadata":{"id":"rm_nLTc9dN67","colab_type":"code","colab":{}},"source":["VCmodel=VotingClassifier(estimators=[('knn', knn), ('dt', dt), ('rf', rf), ('lgr', lgr)], voting='soft')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"BFB4xSKgTRdK","colab_type":"code","outputId":"d18e487c-728b-450f-a102-2666b9dcdbdd","executionInfo":{"status":"ok","timestamp":1589176004030,"user_tz":300,"elapsed":819325,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":649}},"source":["VCmodel.fit(xtrain, ytrain.values.reshape(-1,1))\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.6/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["VotingClassifier(estimators=[('knn',\n","                              KNeighborsClassifier(algorithm='auto',\n","                                                   leaf_size=30,\n","                                                   metric='minkowski',\n","                                                   metric_params=None,\n","                                                   n_jobs=None, n_neighbors=5,\n","                                                   p=2, weights='uniform')),\n","                             ('dt',\n","                              DecisionTreeClassifier(ccp_alpha=0.0,\n","                                                     class_weight=None,\n","                                                     criterion='gini',\n","                                                     max_depth=None,\n","                                                     max_features=None,\n","                                                     max_leaf_nodes=None,\n","                                                     min_impurity_decrease=0.0,\n","                                                     min_impurity_split...\n","                                                     random_state=None,\n","                                                     verbose=0,\n","                                                     warm_start=False)),\n","                             ('lgr',\n","                              LogisticRegression(C=1.0, class_weight=None,\n","                                                 dual=False, fit_intercept=True,\n","                                                 intercept_scaling=1,\n","                                                 l1_ratio=None, max_iter=1000,\n","                                                 multi_class='multinomial',\n","                                                 n_jobs=None, penalty='l2',\n","                                                 random_state=None,\n","                                                 solver='lbfgs', tol=0.0001,\n","                                                 verbose=0,\n","                                                 warm_start=False))],\n","                 flatten_transform=True, n_jobs=None, voting='soft',\n","                 weights=None)"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"VkcAvCANvhZP","colab_type":"code","outputId":"ff6e7dad-0fb6-438f-986a-56fbbd4ff209","executionInfo":{"status":"ok","timestamp":1589176055920,"user_tz":300,"elapsed":871195,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":561}},"source":["preds_proba = VCmodel.predict_proba(xtest)\n","ypred = topNscore(preds_proba, ytest.values, VCmodel, n)\n","print(classification_report(ytest,ypred))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           0       0.64      0.57      0.60      1554\n","           1       0.91      0.89      0.90      1483\n","           2       0.76      0.75      0.76      1528\n","           3       0.69      0.54      0.61      1576\n","           4       0.93      0.92      0.93      1618\n","           5       0.98      0.96      0.97      1570\n","           6       0.74      0.78      0.76      1530\n","           7       0.63      0.65      0.64      1489\n","           8       0.80      0.79      0.80      1562\n","           9       0.68      0.68      0.68      1564\n","          10       0.75      0.79      0.77      1648\n","          11       0.56      0.56      0.56      1525\n","          12       0.75      0.74      0.75      1533\n","          13       0.92      0.90      0.91      1578\n","          14       0.98      0.99      0.98      1584\n","          15       0.74      0.83      0.78      1590\n","          16       0.74      0.80      0.77      1505\n","          17       0.78      0.79      0.79      1557\n","          18       0.82      0.86      0.84      1593\n","          19       0.61      0.58      0.59      1670\n","          20       0.62      0.75      0.68      1601\n","          21       0.85      0.84      0.85      1513\n","          22       0.60      0.55      0.57      1519\n","          23       0.93      0.95      0.94      1558\n","          24       0.81      0.79      0.80      1552\n","\n","    accuracy                           0.77     39000\n","   macro avg       0.77      0.77      0.77     39000\n","weighted avg       0.77      0.77      0.77     39000\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"CpUK3q_uKj1T","colab_type":"code","outputId":"2e2b2536-37bc-4d80-c8da-903fe6f0b60e","executionInfo":{"status":"ok","timestamp":1589176055921,"user_tz":300,"elapsed":871179,"user":{"displayName":"Dean Cochran","photoUrl":"","userId":"01347124029233554353"}},"colab":{"base_uri":"https://localhost:8080/","height":442}},"source":["genre_legend"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{0: 'Movie',\n"," 1: 'RnB',\n"," 2: 'Alternative',\n"," 3: 'Country',\n"," 4: 'Dance',\n"," 5: 'Electronic',\n"," 6: 'Anime',\n"," 7: 'Folk',\n"," 8: 'Blues',\n"," 9: 'Opera',\n"," 10: 'HipHop',\n"," 11: \"Children's Music\",\n"," 12: 'Rap',\n"," 13: 'Indie',\n"," 14: 'Classical',\n"," 15: 'Pop',\n"," 16: 'Reggae',\n"," 17: 'Reggaeton',\n"," 18: 'Jazz',\n"," 19: 'Rock',\n"," 20: 'Ska',\n"," 21: 'Comedy',\n"," 22: 'Soul',\n"," 23: 'Soundtrack',\n"," 24: 'World'}"]},"metadata":{"tags":[]},"execution_count":56}]},{"cell_type":"markdown","metadata":{"id":"QNwivfuqrG_l","colab_type":"text"},"source":["# CONCLUSION\n","From our analysis we observed that our models were infact capable of predicting the genre of a single song. However, our models were only capable of this when presented with the opportunity to estimate more than one genre of a song. This addresses our largest issue in the dataset. Our contained a total of 40% duplicate tracks. Most of which had multiple genre labels as we observed earlier in the exploration of this lab. \n","\n","In this lab we made a few very large assumptions that if were not made, would have completely changed the results of the project. First we assumed that the data had not been balanced to resemble to real world distribution of the frequencies of genres. Becuase of this assumption we were forced to rescale the data and in turn change the overall applicability of our model. Second we assumed that this data had been randomly selected without bias. Obiviously this is not something we are capable of verifying, but with most test labs, it is a common assumption.\n","\n","Since our data wasn't balanced, and we did rebalance the information we must conclude that this model is not applicable to the real world. We do not know the frequencies of the amounts of songs that fit in each genre in the real world. This was something that was unforeseen as the project begun, and it is something I would change if I had more time to work on the project. Addtionally, I would've preferred it use Bayesian optimization to limit the total run time of the project. Using Grid Search to optimize the parameters of 5 total models did not allow this project to be quickly analyzed, but it Bayesian optimization was utilized, I believe the project run time would have reduced significantly."]}]}